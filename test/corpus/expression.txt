===
ident
===

(foo)

---

(source (list_lit (ident)))

===
number
===

(100)

---

(source (list_lit (int_lit)))

===
field
===

(m.foo)

---

(source
    (list_lit
        value: (field_access
            object: (ident)
            field: (ident))))

===
string-1
===

('')

---

(source (list_lit (str_lit)))

===
string-2
===

("")

---

(source (list_lit (str_lit)))

===
string-3
===

('foo')

---

(source (list_lit (str_lit)))

===
string-4
===

("foo")

---

(source (list_lit (str_lit)))

===
char-escape-1
===

("\a")

---

(source
    (list_lit value:
        (str_lit (escape_char))))

===
char-escape-2
:error
===

("\[")

===
char-escape-3
:error
===

("\(")

===
char-escape-3-b

Added to check that test annotated with :error works as intended.
This test should fail because the source is valid.

:error
===

("\b")

===
char-escape-4
===

("\ab")

---

(source
    (list_lit value:
        (str_lit
            (escape_char))))

===
char-escape-5
===

("a\b")

---

(source
    (list_lit value:
        (str_lit
            (escape_char))))

===
char-escape-6
===

("a\bc")

---

(source
    (list_lit value:
        (str_lit
            (escape_char))))

===
char-escape-7
===

("a\bc\d")

---

(source
    (list_lit value:
        (str_lit
            (escape_char)
            (escape_char))))

===
char-escape-8
===

("\a\b")

---

(source
    (list_lit value:
        (str_lit
            (escape_char)
            (escape_char))))

===
bool-1
===

(true)

---

(source (list_lit (bool_lit)))

===
bool-2
===

(false)

---

(source (list_lit (bool_lit)))

===
each-1
:error
===

(:each (in m.items i item))

===
each-2
:error
===

(:each (in m.items item))

===
each-3
===

(:each (in m.items i item)
    [div (i) (item)]
    )

---

(source
    (list_lit
        value: (kwd_lit name: (ident))
        value: (list_lit
                    value: (ident)
                    value: (field_access object: (ident) field: (ident))
                    value: (ident)
                    value: (ident))
        value: (element tag: (ident)
            (children
                (list_lit value: (ident))
                (list_lit value: (ident))))))

===
operator-1
===

(+ 1 m b)

---

(source
    (list_lit
        value: (sym)
        value: (int_lit)
        value: (ident)
        value: (ident)))

===
operator-2
===

(- 1 m)

---

(source
    (list_lit
        value: (sym)
        value: (int_lit)
        value: (ident)))

===
operator-3
===

(* 1 2)

---

(source
    (list_lit
        value: (sym)
        value: (int_lit)
        value: (int_lit)))

===
operator-4
===

(/ a b)

---

(source
    (list_lit
        value: (sym)
        value: (ident)
        value: (ident)))

===
logical-1
===

(:and true true)

---

(source
    (list_lit
        value: (kwd_lit name: (ident))
        value: (bool_lit)
        value: (bool_lit)))

===
logical-2
===

(:or false true)

---

(source
    (list_lit
        value: (kwd_lit name: (ident))
        value: (bool_lit)
        value: (bool_lit)))

===
logical-3
===

(:not true)

---

(source
    (list_lit
        value: (kwd_lit name: (ident))
        value: (bool_lit)))

===
keyword
===

(:and)

---

(source
    (list_lit
        value: (kwd_lit name: (ident))))

===
nested expr
===

(:and true (+ 1 3))

---

(source
    (list_lit
        value: (kwd_lit name: (ident))
        value: (bool_lit)
        value:
            (list_lit
                value: (sym)
                value: (int_lit)
                value: (int_lit))))

===
string-template-1
===

("\(true)")

---

(source
    (list_lit value:
        (str_lit templ:
            (bool_lit))))

===
string-template-2
===

("foo\(100)")

---

(source
    (list_lit value:
        (str_lit templ:
            (int_lit))))

